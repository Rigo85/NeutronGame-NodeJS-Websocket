#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var Neutron = require('../games/neutron/main');

var debug = require('debug')('neutrongame-nodejs-websocket:server');
var http = require('http');
var WebSocket = require('ws');
var cookie = require('cookie');
var cookieParser = require('cookie-parser');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);

const wss = new WebSocket.Server({ server });

wss.on('connection', (ws, req) => {
  const sid = cookieParser.signedCookie(cookie.parse(req.headers.cookie)['connect.sid'], 'secret');

  ws.isAlive = true;

  ws.on('pong', () => {
    ws.isAlive = true;
  });

  ws.on('message', msg => {
    const message = JSON.parse(msg);
    let game = message.game;

    const gameHandlers = {
      'neutron': () => { Neutron.processEvent(message, ws, sid); },
      'default': () => {
        //TODO ver que hacer...!
      }
    };

    if (!gameHandlers[game]) {
      game = 'default';
    }

    gameHandlers[game]();
  });

  //ws.send('crear lo necesario para nuevo cliente');

  ws.on('error', (err) => {
    console.warn(`Client disconnected - reason: ${err}`);
  })
});

setInterval(() => {
  wss.clients.forEach(ws => {
    if (!ws.isAlive) return ws.terminate();

    ws.isAlive = false;
    ws.ping(null, undefined);
  });
}, 10000);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
